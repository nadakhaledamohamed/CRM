@model CRM.Models.PersonDetailsViewModel

@{
    ViewData["Title"] = "Person Details";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<link href="~/css/light.css" rel="stylesheet" />


<div class="container mt-5">
    @Html.AntiForgeryToken()
    <!-- Info Cards -->
    <div class="row g-4 mb-4">
        <div class="col-md-6 neon-card h-100">
           @*  <div class="neon-header"><i class="bi bi-person-circle"></i> User Info</div> *@
            <h5 class="neon-header mb-3">
                <i class="bi bi-person-circle me-2"></i> User Info
            </h5>

            <p><i class="bi bi-person-badge"></i> <strong>User Type:</strong> @(Model.Person.UserType == 1 ? "Applicant" : "Guardian")</p>
            <p><i class="bi bi-award"></i> <strong>Certificate:</strong> @DisplayValue(Model.Person.Certificate?.CertificateName)</p>
            <p></p>
           
            <p><i class="bi bi-globe"></i> <strong>How Did You Know Us?</strong> @DisplayValue(Model.Person.HowDidYouKnowUs?.HowDidYouKnowUs)</p>  @{
                var majorsList = ViewBag.MajorInterests as List<string>;
            }
            @if (majorsList != null && majorsList.Any())
            {
                <p><i class="bi bi-mortarboard"></i> <strong>Major Interest(s):</strong></p>
                <div class="d-flex flex-column ms-3">
                    @for (int i = 0; i < majorsList.Count; i++)
                    {
                        <div class="mb-1">
                            <span class="fw-medium">@majorsList[i]</span>
                            <span class="badge @(i == 0 ? "bg-primary" : "bg-secondary") ms-2">
                                @(i == 0 ? "Primary" : "Secondary")
                            </span>
                        </div>
                    }
                </div>

                @*   <div style="margin-left: 20px;">
                    @for (int i = 0; i < majorsList.Count; i++)
                    {
                        <span class="me-2">
                            @majorsList[i]
                            @if (i == 0)
                            {
                                <span class="badge bg-primary ms-1">Primary</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary ms-1">Secondary</span>
                            }
                        </span>
                        @if (i < majorsList.Count - 1)
                        {
                            <br />
                        }
                    }
                </div> *@
            }
            else
            {
                <p><i class="bi bi-mortarboard"></i> <strong>Major:</strong> Not specified</p>
            }
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
        </div>






        <div class="col-md-6 neon-card h-100">
            <h5 class="neon-header mb-3">
                <i class="bi bi-person-circle me-2"></i> Personal Info
            </h5>
            <p><i class="bi bi-person"></i> <strong>Full Name:</strong> @Model.Person.FirstName @Model.Person.LastName</p>

            <p><i class="bi bi-envelope"></i> <strong>Email:</strong> @DisplayValue(Model.Person.Email)</p>
            <p><i class="bi bi-phone"></i> <strong>Phone:</strong> @DisplayValue(Model.Person.Phone)</p>
            <p><i class="bi bi-credit-card"></i> <strong>National ID:</strong> @DisplayValue(Model.Person.NationalId)</p>
            <p><i class="bi bi-building"></i> <strong>High School:</strong> @DisplayValue(Model.Person.HighSchool?.HighSchoolName)</p>
            @* <p><i class="bi bi-mortarboard"></i> <strong>Major:</strong> @DisplayValue(Model.Person.Major?.MajorInterest)</p>  *@
            @* Multiple majors display *@
          
            <p><i class="bi bi-calendar-plus"></i> <strong>Created At:</strong> @DisplayDate(Model.Person.CreatedAt)</p>
        </div>
    </div>

    <!-- Request Table -->
    <div class="neon-card neon-table-container">
        <div class="neon-header"><i class="bi bi-journal-text"></i> Request History</div>
        @if (!Model.Requests.Any())
        {
            <p class="text-muted">No requests yet.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table neon-table align-middle">
                    <thead>
                        <tr>
                            <th>Request Number</th>
                            <th>Description</th>
                            <th>Status</th>
                            <th>Comments</th>
                            <th>Follow-Up Count</th>
                            <th>Last Follow-Up</th>
                            <th>Created By</th>
                            <th>Created At</th>
                            <th>Updated By</th>
                            <th>Updated At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Requests.Count; i++)
                        {
                            var req = Model.Requests[i];
                            <tr>
                                <td>@(i + 1)</td>
                                <td><i class="bi bi-chat-dots"></i> @DisplayValue(req.Description)</td>
                                <td><i class="bi bi-check2-circle"></i> @DisplayValue(req.StatusName)</td>
                                <td><i class="bi bi-chat-left-text"></i> @DisplayValue(req.Comments)</td>
                                <td>
                                    @if (req.FollowUpCount > 0)
                                    {
                                        <span class="badge bg-info">@req.FollowUpCount</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">0</span>
                                    }

                                </td>
                                <td>@DisplayDate(req.LastFollowUpDate)</td>
                                <td>@DisplayValue(req.CreatedByName)</td>
                                <td>@DisplayDate(req.CreatedAt)</td>
                                <td>@DisplayValue(req.UpdatedByName)</td>
                                <td>@DisplayDate(req.UpdatedAt)</td>
                                <td>    
                                    <!-- Follow-Up Button Goes Here -->
                                    @if (req.FollowUpCount < 3 && req.StatusId==1)
                                    {
                                        <button type="button"
                                                class="btn btn-sm btn-warning mark-followup-btn"
                                                data-request-id="@req.RequestId"
                                                onclick="markFollowUpDone(@req.RequestId)">
                                            <i class="bi bi-check2-circle"></i> Follow-Up
                                        </button>
                                    }
                                    else if (req.StatusId != 1)
                                    {
                                        <span class="badge bg-secondary" title="Follow-up allowed only for 'New' status">Not Applicable</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Completed</span>
                                    }
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
    </div>

    <!-- Action Buttons -->
    <div class="text-center my-4">
        <a asp-action="EditWithRequest"  asp-route-id="@Model.Person.PersonId" class="btn-glow me-3">
            <i class="bi bi-pencil-square"></i> Edit
        </a>
        <a asp-action="GetAll" class="btn-glow me-3">
            <i class="bi bi-arrow-left-circle"></i> Back
        </a>
        <button type="button" class="btn-glow" data-bs-toggle="modal" data-bs-target="#createRequestModal">
            <i class="bi bi-plus-circle"></i> Add Request
        </button>
    </div>

  </div>
   

    <!-- Modal HTML -->
    <div class="modal fade" id="createRequestModal" tabindex="-1" aria-labelledby="createRequestModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createRequestModalLabel">
                        <i class="bi bi-plus-circle-fill"></i> New Request for @Model.Person.FirstName
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body px-4 py-3" id="createRequestModalBody">
                    <div class="text-muted">Loading form...</div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    @section Scripts {
        <script>
             window.markFollowUpDone = markFollowUpDone;

            $(document).ready(function () {
                const personId = @Model.Person.PersonId;

                // Load form when modal opens
                $('#createRequestModal').on('show.bs.modal', function (e) {
                    console.log('Modal opening for person ID:', personId); // Debug log
                    $('#createRequestModalBody').html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');

                    $.ajax({
                        url: '/Request/CreateFromPerson',
                        type: 'GET',
                        data: { personId: personId },
                        success: function (data) {
                            $('#createRequestModalBody').html(data);
                            console.log('Form loaded successfully'); // Debug log
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading form:', error); // Debug log
                            $('#createRequestModalBody').html('<div class="alert alert-danger">Error loading form: ' + error + '</div>');
                        }
                    });
                });

                // Clear modal content when closed
                $('#createRequestModal').on('hidden.bs.modal', function () {
                    $('#createRequestModalBody').html('<div class="text-muted">Loading form...</div>');
                });

                // Handle form submission
                $(document).on('submit', '#createRequestForm', function (e) {
                    e.preventDefault();
                    console.log('Form submitted'); // Debug log

                    const $form = $(this);
                    const $submitButton = $form.find('button[type="submit"]');

                    // Disable submit button to prevent double submission
                    $submitButton.prop('disabled', true).html('<i class="spinner-border spinner-border-sm me-2"></i>Saving...');

                    $.ajax({
                        type: 'POST',
                        url: $form.attr('action'),
                        data: $form.serialize(),
                        success: function (response) {
                            console.log('Form submission response:', response); // Debug log

                            if (response.success) {
                                $('#createRequestModal').modal('hide');
                                // Refresh the page or update the requests table
                                location.reload();
                            } else {
                                // If validation errors, update the modal body with the returned partial view
                                $('#createRequestModalBody').html(response);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Form submission error:', error); // Debug log
                            alert('An error occurred while saving the request: ' + error);
                        },
                        complete: function () {
                            // Re-enable submit button
                            $submitButton.prop('disabled', false).html('<i class="bi bi-save"></i> Save Request');
                        }
                    });
                });
            });

                       // mark follow-up button click
                function markFollowUpDone(requestId) {
            if (!requestId) {
                alert("Missing request ID");
                return;
            }

            if (!confirm("Mark this request as followed up?")) return;

            // Get the CSRF token
            const token = document.querySelector("input[name='__RequestVerificationToken']").value;

            // Disable the button immediately to prevent double clicks
            const button = document.querySelector(`[data-request-id="${requestId}"].mark-followup-btn`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="spinner-border spinner-border-sm me-1"></i> Processing...';
            }

            fetch('/Persons/MarkFollowUpDone', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `id=${requestId}&__RequestVerificationToken=${encodeURIComponent(token)}`
            })
            .then(res => {
                if (!res.ok) throw new Error("Follow-up failed.");
                return res.json();
            })
            .then(data => {
                if (data.success) {
                    // Update the button to show completion
                    if (button) {
                        button.innerHTML = '<i class="bi bi-check-circle"></i> Completed';
                        button.classList.remove("btn-warning");
                        button.classList.add("btn-success");
                    }

                    // Show success message
                    if (typeof toastr !== 'undefined') {
                        toastr.success('Follow-up marked as completed successfully!');
                    } else {
                        alert('Follow-up marked as completed successfully!');
                    }

                    // reload the page to update the follow-up count
                  location.reload();
                } else {
                    // Re-enable button on failure
                    if (button) {
                        button.disabled = false;
                        button.innerHTML = '<i class="bi bi-check2-circle"></i> Follow-Up';
                    }

                    if (typeof toastr !== 'undefined') {
                        toastr.error(data.message || "Failed to process follow-up.");
                    } else {
                        alert(data.message || "Failed to process follow-up.");
                    }
                }
            })
            .catch(err => {
                console.error(err);

                // Re-enable button on error
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="bi bi-check2-circle"></i> Follow-Up';
                }

                if (typeof toastr !== 'undefined') {
                    toastr.error("Error marking follow-up. Please try again.");
                } else {
                    alert("Error marking follow-up. Please try again.");
                }
            });
        }
        </script>
    }

<!-- Helpers -->
@using Microsoft.AspNetCore.Html
@functions {
    public IHtmlContent DisplayValue(string? val)
    {
        var normalized = val?.Trim()?.ToLower();
        return string.IsNullOrWhiteSpace(val) || normalized == "n/a" || normalized == "unknown"
            ? new HtmlString("<span class='badge bg-secondary text-light'>Not Provided</span>")
            : new HtmlString(System.Net.WebUtility.HtmlEncode(val));
    }

    public IHtmlContent DisplayDate(DateTime? dt)
    {
        return dt.HasValue && dt.Value > DateTime.MinValue
            ? new HtmlString(dt.Value.ToString("yyyy-MM-dd HH:mm"))
            : new HtmlString("<span class='badge bg-secondary text-light'>Not Provided</span>");
    }
}
